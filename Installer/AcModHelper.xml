<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AcModHelper</name>
    </assembly>
    <members>
        <member name="T:ModHelper.ModConfig">
            <summary>
            A helper class to manage your mod's config.json file and use it's values
            </summary>
        </member>
        <member name="F:ModHelper.ModConfig.UseReflection">
            <summary>
            Allow the use of System.Reflection within these methods to read and write to binded class fields
            </summary>
        </member>
        <member name="P:ModHelper.ModConfig.Item(System.String)">
            <summary>
            Get or set a Config value. If it doesn't exist, make a new one (If Reflection : Getting will try to get cooresponding field variable. Setting will also set corresponding variable)
            </summary>
            <param name="key">The name of the variable to index</param>
            <returns></returns>
        </member>
        <member name="F:ModHelper.ModConfig.FieldRefList">
            <summary>
            Key:ID Value[0]:FieldInfo Value[1]:Instance
            </summary>
        </member>
        <member name="F:ModHelper.ModConfig.ConfigLocation">
            <summary>
            The location of the Config file
            </summary>
        </member>
        <member name="M:ModHelper.ModConfig.#ctor">
            <summary>
            Load the Config from the current mod's directory
            </summary>
        </member>
        <member name="M:ModHelper.ModConfig.#ctor(System.String)">
            <summary>
            Load the Config file from it's path
            </summary>
            <param name="path">The path of the Config file</param>
        </member>
        <member name="M:ModHelper.ModConfig.GetFieldInfo``1(System.String)">
            <summary>
            (Reflection) Get the FieldInfo of a class's variable
            </summary>
            <typeparam name="T">The holding class to get the variable from</typeparam>
            <param name="VariableName">The name of the variable</param>
            <returns>FieldInfo representing the class's variable</returns>
        </member>
        <member name="M:ModHelper.ModConfig.GetFieldInfo(System.Type,System.String)">
            <summary>
            (Reflection) Get the FieldInfo of a class's variable
            </summary>
            <param name="T">The holding class to get the variable from</param>
            <param name="VariableName">The name of the variable</param>
            <returns>FieldInfo representing the class's variable</returns>
        </member>
        <member name="M:ModHelper.ModConfig.BindConfig(System.Object,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            (Reflection) Bind a field to the Config for loading and saving (WARNING : Using this will set UseReflection to true)
            </summary>
            <param name="instance">The class instance to use, null if static</param>
            <param name="field">The variable to use, acquire with 'typeof(Class).GetField("variableName")', or ModConfig.GetFieldInfo</param>
            <param name="UpdateRef">Set the value of the variable to what's in the Config, if it exists</param>
        </member>
        <member name="M:ModHelper.ModConfig.BindConfig``1(``0,System.String,System.Boolean)">
            <summary>
            (Reflection) Bind a field to the Config for loading and saving (WARNING : Using this will set UseReflection to true)
            </summary>
            <typeparam name="T">The class type</typeparam>
            <param name="instance">The class instance to use, null if static</param>
            <param name="VariableName">The name of the variable</param>
            <param name="UpdateRef">Set the value of the variable to what's in the Config, if it exists</param>
        </member>
        <member name="M:ModHelper.ModConfig.TryGetConfig``1(System.String,``0@)">
            <summary>
            Get a value of a specified name from the Config
            </summary>
            <typeparam name="T">The type of object being acquired</typeparam>
            <param name="ConfigID">The name of the object to try to get</param>
            <param name="value">Returns the object as type if it exists</param>
            <returns>Returns true if the object exists</returns>
        </member>
        <member name="M:ModHelper.ModConfig.TryGetConfigF(System.String,System.Single@)">
            <summary>
            Get a float value of a specified name from the Config
            </summary>
            <param name="ConfigID">The name of the float value to try to get</param>
            <param name="value">Returns the float value if it exists</param>
            <returns>Returns true if the object exists</returns>
        </member>
        <member name="M:ModHelper.ModConfig.WriteConfigJsonFile">
            <summary>
            Write Config data to the file (If Reflection: Apply all referenced fields to the Config before serializing)
            </summary>
            <returns>Returns true if successful</returns>
        </member>
        <member name="M:ModHelper.ModConfig.WriteConfigJsonFile(ModHelper.ModConfig)">
            <summary>
            Write Config data to the file (If Reflection: Apply all referenced fields to the Config before serializing)
            </summary>
            <returns>Returns true if successful</returns>
        </member>
        <member name="M:ModHelper.ModConfig.ReapplyConfigToRef">
            <summary>
            (Reflection) Reload all the Config values and push them to the references
            </summary>
        </member>
        <member name="M:ModHelper.ModConfig.ReadConfigJsonFile">
            <summary>
            Reload the Config file (If Reflection: Apply Config changes to binded fields)
            </summary>
            <returns>Returns true if successful</returns>
        </member>
        <member name="M:ModHelper.ModConfig.ReadConfigJsonFile(ModHelper.ModConfig)">
            <summary>
            Reload the Config file
            </summary>
            <param name="Config">The ModConfig class to add changes to (If instance uses Reflection: It will apply Config changes to binded fields)</param>
            <returns>Returns true if successful</returns>
        </member>
    </members>
</doc>
