<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AcModHelper</name>
    </assembly>
    <members>
        <member name="T:ModHelper.ModConfig">
            <summary>
            A helper class to manage your mod's config.json file and use it's values
            </summary>
        </member>
        <member name="F:ModHelper.ModConfig.ConfigLocation">
            <summary>
            The location of the Config file
            </summary>
        </member>
        <member name="M:ModHelper.ModConfig.#ctor">
            <summary>
            Load the Config from the current mod's directory
            </summary>
        </member>
        <member name="M:ModHelper.ModConfig.GetFieldInfo``1(System.String)">
            <summary>
            Get the FieldInfo of a class's variable
            </summary>
            <typeparam name="T">The class to get the variable from</typeparam>
            <param name="VariableName">The name of the variable</param>
            <returns>FieldInfo representing the class's variable</returns>
        </member>
        <member name="M:ModHelper.ModConfig.GetFieldInfo(System.Type,System.String)">
            <summary>
            Get the FieldInfo of a class's variable
            </summary>
            <param name="T">The class to get the variable from</param>
            <param name="VariableName">The name of the variable</param>
            <returns>FieldInfo representing the class's variable</returns>
        </member>
        <member name="M:ModHelper.ModConfig.BindConfig(System.Object,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Bind a field to the Config for loading and saving
            </summary>
            <param name="instance">The class instance to use, null if static</param>
            <param name="field">The variable to use, acquire with 'typeof(Class).GetField("variableName")', or GetFieldInfo</param>
            <param name="UpdateRef">Set the value of the variable to what's in the Config, if it exists</param>
        </member>
        <member name="M:ModHelper.ModConfig.BindConfig``1(``0,System.String,System.Boolean)">
            /// <summary>
            Bind a field to the Config for loading and saving
            </summary>
            /// <typeparam name="T">The class type</typeparam>
            <param name="instance">The class instance to use, null if static</param>
            <param name="VariableName">The name of the variable</param>
            <param name="UpdateRef">Set the value of the variable to what's in the Config, if it exists</param>
        </member>
        <member name="M:ModHelper.ModConfig.TryGetConfig``1(System.String,``0@)">
            <summary>
            Get a value of a specified name from the Config
            </summary>
            <typeparam name="T">The type of object being acquired</typeparam>
            <param name="ConfigID">The name of the object to try to get</param>
            <param name="value">Returns the object as type if it exists</param>
            <returns>Returns true if the object exists</returns>
        </member>
        <member name="M:ModHelper.ModConfig.TryGetConfigF(System.String,System.Single@)">
            <summary>
            Get a float value of a specified name from the Config
            </summary>
            <param name="ConfigID">The name of the float value to try to get</param>
            <param name="value">Returns the float value if it exists</param>
            <returns>Returns true if the object exists</returns>
        </member>
        <member name="M:ModHelper.ModConfig.WriteConfigJsonFile">
            <summary>
            Apply binded fields to the Config, and write changes to the Config file
            </summary>
            <param name="UpdateFromRefList">Apply binded fields to the Config and file</param>
            <returns>Returns true if successful</returns>
        </member>
        <member name="M:ModHelper.ModConfig.ReapplyConfigToRef">
            <summary>
            Reload all the Config values and push them to the references
            </summary>
        </member>
        <member name="M:ModHelper.ModConfig.ReadConfigJsonFile(System.Boolean)">
            <summary>
            Reload the Config file
            </summary>
            <param name="ApplyToRefList">Apply changes loaded from the Config file to binded fields</param>
            <returns>Returns true if successful</returns>
        </member>
    </members>
</doc>
